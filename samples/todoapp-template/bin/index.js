// Generated by Haxe 3.4.2
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	ReactDOM.render(React.createElement(view_TodoApp),window.document.getElementById("app"));
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var msignal_Signal = function(valueClasses) {
	if(valueClasses == null) {
		valueClasses = [];
	}
	this.valueClasses = valueClasses;
	this.slots = msignal_SlotList.NIL;
	this.priorityBased = false;
};
msignal_Signal.__name__ = true;
msignal_Signal.prototype = {
	add: function(listener) {
		return this.registerListener(listener);
	}
	,addOnce: function(listener) {
		return this.registerListener(listener,true);
	}
	,addWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,false,priority);
	}
	,addOnceWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,true,priority);
	}
	,remove: function(listener) {
		var slot = this.slots.find(listener);
		if(slot == null) {
			return null;
		}
		this.slots = this.slots.filterNot(listener);
		return slot;
	}
	,removeAll: function() {
		this.slots = msignal_SlotList.NIL;
	}
	,registerListener: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		if(this.registrationPossible(listener,once)) {
			var newSlot = this.createSlot(listener,once,priority);
			if(!this.priorityBased && priority != 0) {
				this.priorityBased = true;
			}
			if(!this.priorityBased && priority == 0) {
				this.slots = this.slots.prepend(newSlot);
			} else {
				this.slots = this.slots.insertWithPriority(newSlot);
			}
			return newSlot;
		}
		return this.slots.find(listener);
	}
	,registrationPossible: function(listener,once) {
		if(!this.slots.nonEmpty) {
			return true;
		}
		var existingSlot = this.slots.find(listener);
		if(existingSlot == null) {
			return true;
		}
		return false;
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return null;
	}
	,get_numListeners: function() {
		return this.slots.get_length();
	}
};
var msignal_Signal0 = function() {
	msignal_Signal.call(this);
};
msignal_Signal0.__name__ = true;
msignal_Signal0.__super__ = msignal_Signal;
msignal_Signal0.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function() {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute();
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot0(this,listener,once,priority);
	}
});
var msignal_Signal1 = function(type) {
	msignal_Signal.call(this,[type]);
};
msignal_Signal1.__name__ = true;
msignal_Signal1.__super__ = msignal_Signal;
msignal_Signal1.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot1(this,listener,once,priority);
	}
});
var msignal_Signal2 = function(type1,type2) {
	msignal_Signal.call(this,[type1,type2]);
};
msignal_Signal2.__name__ = true;
msignal_Signal2.__super__ = msignal_Signal;
msignal_Signal2.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value1,value2) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value1,value2);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot2(this,listener,once,priority);
	}
});
var msignal_Slot = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	this.signal = signal;
	this.set_listener(listener);
	this.once = once;
	this.priority = priority;
	this.enabled = true;
};
msignal_Slot.__name__ = true;
msignal_Slot.prototype = {
	remove: function() {
		this.signal.remove(this.listener);
	}
	,set_listener: function(value) {
		return this.listener = value;
	}
};
var msignal_Slot0 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot0.__name__ = true;
msignal_Slot0.__super__ = msignal_Slot;
msignal_Slot0.prototype = $extend(msignal_Slot.prototype,{
	execute: function() {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		this.listener();
	}
});
var msignal_Slot1 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot1.__name__ = true;
msignal_Slot1.__super__ = msignal_Slot;
msignal_Slot1.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param != null) {
			value1 = this.param;
		}
		this.listener(value1);
	}
});
var msignal_Slot2 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot2.__name__ = true;
msignal_Slot2.__super__ = msignal_Slot;
msignal_Slot2.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1,value2) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param1 != null) {
			value1 = this.param1;
		}
		if(this.param2 != null) {
			value2 = this.param2;
		}
		this.listener(value1,value2);
	}
});
var msignal_SlotList = function(head,tail) {
	this.nonEmpty = false;
	if(head == null && tail == null) {
		this.nonEmpty = false;
	} else if(head != null) {
		this.head = head;
		this.tail = tail == null ? msignal_SlotList.NIL : tail;
		this.nonEmpty = true;
	}
};
msignal_SlotList.__name__ = true;
msignal_SlotList.prototype = {
	get_length: function() {
		if(!this.nonEmpty) {
			return 0;
		}
		if(this.tail == msignal_SlotList.NIL) {
			return 1;
		}
		var result = 0;
		var p = this;
		while(p.nonEmpty) {
			++result;
			p = p.tail;
		}
		return result;
	}
	,prepend: function(slot) {
		return new msignal_SlotList(slot,this);
	}
	,insertWithPriority: function(slot) {
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		var priority = slot.priority;
		if(priority >= this.head.priority) {
			return this.prepend(slot);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(priority > current.head.priority) {
				subClone.tail = current.prepend(slot);
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,filterNot: function(listener) {
		if(!this.nonEmpty || listener == null) {
			return this;
		}
		if(Reflect.compareMethods(this.head.listener,listener)) {
			return this.tail;
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(Reflect.compareMethods(current.head.listener,listener)) {
				subClone.tail = current.tail;
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		return this;
	}
	,find: function(listener) {
		if(!this.nonEmpty) {
			return null;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return p.head;
			}
			p = p.tail;
		}
		return null;
	}
};
var react_template__$Attributes_ValueOrCallable_$Impl_$ = {};
react_template__$Attributes_ValueOrCallable_$Impl_$.__name__ = true;
react_template__$Attributes_ValueOrCallable_$Impl_$.toT = function(this1) {
	if(Reflect.isFunction(this1)) {
		return this1();
	}
	return this1;
};
var react_template_Attributes = function() { };
react_template_Attributes.__name__ = true;
react_template_Attributes.attrs = function(input) {
	return react_template__$Attributes_ValueOrCallable_$Impl_$.toT(input);
};
react_template_Attributes.combine = function(a,b) {
	a = react_template_Attributes.attrs(a);
	b = react_template_Attributes.attrs(b);
	var _g = 0;
	var _g1 = Reflect.fields(a);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		if(key == "className" && Object.prototype.hasOwnProperty.call(b,key)) {
			b[key] = react_template_Attributes.combineClassNames(Reflect.field(b,key),Reflect.field(a,key));
		} else {
			b[key] = Reflect.field(a,key);
		}
	}
	return b;
};
react_template_Attributes.combineClassNames = function(a,b) {
	if((a instanceof Array) && a.__enum__ == null) {
		a = a.join(" ");
	}
	if((b instanceof Array) && b.__enum__ == null) {
		b = b.join(" ");
	}
	return Std.string(b) + " " + Std.string(a);
};
var store_TodoActions = function() { };
store_TodoActions.__name__ = true;
var store_TodoStore = function() {
	this.changed = new msignal_Signal0();
	this.loadItems();
	store_TodoActions.toggleItem.add($bind(this,this.toggleItem));
	store_TodoActions.addItem.add($bind(this,this.addItem));
};
store_TodoStore.__name__ = true;
store_TodoStore.prototype = {
	toggleItem: function(id) {
		this.list = this.list.map(function(item) {
			if(item.id == id) {
				item.checked = !item.checked;
			}
			return item;
		});
		this.validate();
	}
	,addItem: function(label) {
		this.list = [{ id : "" + ++this.lastId, label : label, checked : false}].concat(this.list);
		this.validate();
	}
	,validate: function() {
		this.saveItems();
		this.changed.dispatch();
	}
	,saveItems: function() {
		var data = JSON.stringify(this.list);
		window.localStorage.setItem("todos",data);
	}
	,loadItems: function() {
		var data = window.localStorage.getItem("todos");
		if(data != null) {
			this.list = JSON.parse(data);
		} else {
			this.list = [];
		}
		this.lastId = this.list.length;
	}
};
var view_TodoApp = function(props) {
	this.todoStore = new store_TodoStore();
	var _gthis = this;
	React.Component.call(this,props);
	this.state = { items : this.todoStore.list};
	this.todoStore.changed.add(function() {
		_gthis.setState({ items : _gthis.todoStore.list});
	});
};
view_TodoApp.__name__ = true;
view_TodoApp.__super__ = React.Component;
view_TodoApp.prototype = $extend(React.Component.prototype,{
	render: function() {
		var unchecked = this.state.items.filter(function(item) {
			return !item.checked;
		}).length;
		var listProps = { data : this.state.items};
		var tmp = React.createElement("input",{ ref : "input", placeholder : "Enter new task description"});
		var tmp1 = React.createElement("button",{ onClick : $bind(this,this.addItem), className : "button-add"},"+");
		var tmp2 = React.createElement("div",{ className : "header"},[tmp,tmp1]);
		var tmp3 = React.createElement("hr",{ });
		var tmp4 = react_template_Attributes.attrs(listProps);
		var tmp5 = React.createElement(view_TodoList,react_template_Attributes.combine({ className : "list", ref : $bind(this,this.mountList)},tmp4));
		var tmp6 = React.createElement("hr",{ });
		var tmp7 = React.createElement("b","0");
		var tmp8 = React.createElement("div",{ className : "footer"},[tmp7," task(s) left"]);
		return React.createElement("div",{ style : { margin : "10px"}, className : "app"},[tmp2,tmp3,tmp5,tmp6,tmp8]);
	}
	,mountList: function(comp) {
		console.log("List mounted " + Std.string(comp.props));
	}
	,addItem: function() {
		var text = this.refs.input.value;
		if(text.length > 0) {
			store_TodoActions.addItem.dispatch(text);
			this.refs.input.value = "";
		}
	}
});
var view_TodoList = function(props) {
	React.Component.call(this,props);
};
view_TodoList.__name__ = true;
view_TodoList.__super__ = React.Component;
view_TodoList.prototype = $extend(React.Component.prototype,{
	render: function() {
		var style = { padding : this.props.padding};
		return React.createElement("ul",{ className : this.props.className, style : style, onClick : $bind(this,this.toggleChecked)},[this.createChildren()]);
	}
	,createChildren: function() {
		var t = this.props.data;
		if(t != null) {
			return t.map(function(entry) {
				return React.createElement(view_TodoListItem,{ key : entry.id, data : entry, padding : "5px"});
			});
		} else {
			return [];
		}
	}
	,toggleChecked: function(e) {
		var node = e.target;
		if(node.nodeName == "LI") {
			var id = node.id.split("-")[1];
			store_TodoActions.toggleItem.dispatch(id);
		}
	}
});
var view_TodoListItem = function(props) {
	React.Component.call(this,props);
};
view_TodoListItem.__name__ = true;
view_TodoListItem.__super__ = React.Component;
view_TodoListItem.prototype = $extend(React.Component.prototype,{
	shouldComponentUpdate: function(nextProps,nextState) {
		return nextProps.data.checked != this.checked;
	}
	,render: function() {
		var style = { padding : this.props.padding, border : this.props.border};
		var entry = this.props.data;
		this.checked = entry.checked;
		var id = "item-" + entry.id;
		return React.createElement("li",{ id : id, className : this.checked ? "checked" : "", style : style},[entry.label]);
	}
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
msignal_SlotList.NIL = new msignal_SlotList(null,null);
store_TodoActions.addItem = new msignal_Signal1();
store_TodoActions.toggleItem = new msignal_Signal1();
view_TodoApp.displayName = "TodoApp";
view_TodoList.defaultProps = { padding : "10px", className : "list"};
view_TodoList.displayName = "TodoList";
view_TodoListItem.defaultProps = { padding : "10px", border : "solid 1px #363"};
view_TodoListItem.displayName = "TodoListItem";
Main.main();
})();
